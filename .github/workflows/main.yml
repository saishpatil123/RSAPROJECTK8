name: Build and Deploy with Approval

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'Terraform/**'
  workflow_dispatch:
    
permissions:
  id-token: write
  contents: read

env:
  IMAGE_TAG: ${{ github.run_number }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set image tag
        id: set-tag
        run: echo "tag=${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_Token }}

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Run Docker Compose services
        run: |
            docker-compose -f docker-compose.ci.build.yml up
  
        # Build services
      - name: Build Docker Compose services
        run: |
            docker-compose -f docker-compose.yml build --build-arg DOCKER_BUILD_SOURCE=
  
        # Tag and push images
      - name: Push Docker Images
        run: |
          docker-compose -f docker-compose.yml push

      - name: Copy deployment files
        run: |
          mkdir -p artifacts
          find . -name 'mhc-aks.yaml' -exec cp {} artifacts/ \;
          
      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deploy
          path: artifacts

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: production  # <- define this in GitHub with required reviewers for manual approval
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: deploy
          path: ./deploy-files

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          auth-type: oidc
  
      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: demo
          cluster-name: aks-demo-cluster

      - name: Apply Kubernetes manifests
        run: kubectl apply -f ./deploy-files/mhc-aks.yaml
